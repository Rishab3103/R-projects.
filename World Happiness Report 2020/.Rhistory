which.max(a)
which.min(a)
which.max(a[z])
(a)
(a)
(a)
sort(a)
which.max(a)
which.min(a)
murders$rate<-c()
for (i in 1:length(murders$population)) {
rate[i]=(murders$total/murders$population)*100
}
?murders
()
t<-c()
murders$rate<-t
for (i in 1:length(murders$population)) {
rate[i]=(murders$total/murders$population)*100
}
?murders
rate<-c()
murders$rate<-rate
for (i in 1:length(murders$population)) {
rate[i]=(murders$total/murders$population)*100
}
?murders
for (i in 1:length(murders$population))
rate[i]=(murders$total/murders$population)*100
?murders
warnings()
rate<-c()
murders$rate<-rate
for (i in 1:length(murders$population))
rate[i]=(murders$total[i]/murders$population)*100
?murders
warning()
warnings()
warnings()
rate<-c()
murders$rate<-rate
for (i in 1:length(murders$population))
rate[i]=(murders$total[i]/murders$population)*100
?murders
warnings()
rate<-c()
murders$rate<-rate
for (i in 1:length(murders$population))
rate[i]=(murders$total[i]/murders$population[i])*100
?murders
print(murders)
rate<-c()
murders$rate<-rate
for (i in 1:length(murders$population))
murders$rate[i]=(murders$total[i]/murders$population[i])*100
print(murders$rate)
print(murders)
st<-c()
for(i in 1:length(murders$rate)){
if(murders$rate[i]<0.42)
{
st[i]=murders$state[i]
}
}
print(st)
for(i in 1:length(murders$rate)){
if(murders$rate[i]<0.42)
{
st[i]=c(murders$state[i])
}
}
print(st)
for(i in 1:length(murders$rate)){
if(murders$rate[i]<0.42)
st[i]=c(murders$state[i])
}
print(st)
st<-c()
for(i in 1:length(murders$rate)){
if(murders$rate[i]<0.0042)
st[i]=c(murders$state[i])
}
print(st)
st<-c()
for(i in 1:length(murders$rate)){
if(murders$rate[i]>0.0042)
st[i]=c(murders$state[i])
}
print(st)
st<-c()
for(i in 1:length(murders$rate)){
if(murders$rate[i]<0.42)
st[i]=c(murders$state[i])
}
print(st)
spotify%>%
count(playlist_name)
spotify%>%
count(playlist_name)
installed.packages("tidyverse")
library(tidyverse)
library(ggplot2)
spotify<-read.csv("spotify_songs.csv")
summary(spotify$track_popularity)
spotify%>%
count(playlist_name)
spotify%>%
count(playlist_genre)
installed.packages("tidyverse")
library(tidyverse)
library(ggplot2)
spotify<-read.csv("spotify_songs.csv")
summary(spotify$track_popularity)
popularity_relationship<-spotify%>%
select(track_artist,track_popularity,danceability,energy,key,loudness)
summary(popularity_relationship)
refined_popularity<-popularity_relationship%>%
filter(track_popularity>median(track_popularity),danceability>median(danceability),energy>median(energy),key>median(key),loudness>median(loudness))
refined_popularity
cor(refined_popularity$track_popularity,refined_popularity$danceability)
cor(refined_popularity$track_popularity,refined_popularity$energy)
cor(refined_popularity$track_popularity,refined_popularity$loudness)
spotify
cor(spotify$danceability,spotify$liveness)
cor(spotify$danceability,spotify$tempo)
cor(spotify$danceability,spotify$duration_ms)
cor(spotify$danceability, spotify$energy)
cor(spotify$liveness, spotify$tempo)
cor(spotify$liveness,spotify$duration_ms)
cor(spotify$liveness,spotify$energy)
cor(spotify$liveness,spotify$valence)
cor(spotify$liveness,spotify$speechiness)
cor(spotify$liveness,spotify$acousticness)
cor(spotify$liveness,spotify$instrumentalness)
ggplot(spotify, aes(liveness,energy))+geom_smooth(method="lm")
ggplot(spotify, aes(liveness,instrumentalness))+geom_smooth(method="lm")
ggplot(spotify, aes(danceability,loudness))+geom_smooth(method="lm")
ggplot(spotify, aes(danceability,liveness))+geom_smooth(method="lm")
ggplot(spotify, aes(danceability,liveness, color=playlist_genre))+geom_point()
ggplot(spotify, aes(danceability,liveness, color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(danceability,energy, color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(danceability,energy, color=playlist_subgenre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(danceability, color=playlist_genre))+geom_bar()+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,color=playlist_genre))+geom_boxplot()+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,energy,color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,danceability,color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,liveness,color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,acousticness,color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,acousticness,color=playlist_name))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
spotify%>%
count(playlist_genre)
ggplot(spotify, aes(track_popularity,loudness,color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,energy,color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
ggplot(spotify, aes(track_popularity,duration_ms,color=playlist_genre))+geom_smooth(method="lm")+facet_wrap(~playlist_genre)
library(reshape2)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(hrbrthemes)
happiness<-read.csv("2020.csv")
multivariate<-lm(data=happiness, Ladder.score~Logged.GDP.per.capita+Social.support+Healthy.life.expectancy+Freedom.to.make.life.choices+Generosity+Perceptions.of.corruption)
summary(multivariate)
multivariate_refined<-lm(data=happiness, Ladder.score~Logged.GDP.per.capita+Social.support+Healthy.life.expectancy+Freedom.to.make.life.choices+Perceptions.of.corruption)
summary(multivariate_refined)
multivariate_refined1<-lm(data=happiness,Ladder.score~Logged.GDP.per.capita+Social.support+Freedom.to.make.life.choices)
summary(multivariate_refined1)
data<-happiness%>%
select(Ladder.score,Logged.GDP.per.capita,Social.support,Healthy.life.expectancy,Freedom.to.make.life.choices, Generosity,Perceptions.of.corruption)
features <- c("Logged.GDP.per.capita","Social.support","Healthy.life.expectancy","Freedom.to.make.life.choices", "Generosity","Perceptions.of.corruption")
cormat <- round(cor(happiness[c("Ladder.score", features)], use = "complete.obs"), 2)
melted_cormat <- melt(cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
library(ggplot2)
happiness%>%
ggplot(aes(Logged.GDP.per.capita,Ladder.score, color=Regional.indicator))+ geom_point()
happiness%>%
ggplot(aes(Social.support,Ladder.score, color=Regional.indicator))+ geom_point()
happiness%>%
ggplot(aes(Healthy.life.expectancy,Ladder.score, color=Regional.indicator))+ geom_point()
happiness_above_mean<-happiness%>%
filter(Ladder.score>=mean(Ladder.score))%>%
arrange((desc(Ladder.score)))
happiness_above_mean%>%
ggplot(aes(x=Ladder.score,y=Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Happiness scores above the mean", x="Happiness Score")+theme_ipsum()
happiness_below_mean<-happiness%>%
filter(Ladder.score<=mean(Ladder.score))
happiness_below_mean%>%
ggplot(aes(Ladder.score,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Happiness scores below the mean", x="Happiness Score")+theme_ipsum()
happiness_above_mean_top10<-happiness%>%
filter(Ladder.score>=mean(Ladder.score))%>%
filter(Ladder.score>=7.2375)
happiness_above_mean_top10%>%
ggplot(aes(Ladder.score,Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Top 10 Happiness scores ", x="Happiness Score")+theme_ipsum()
happiness_below_mean_top10<-happiness%>%
filter(Ladder.score<=mean(Ladder.score))%>%
filter(Ladder.score<=3.5733)
happiness_below_mean_top10%>%
ggplot(aes(Ladder.score,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Bottom 10 Happiness scores", x="Happiness Score")+theme_ipsum()
gdp_above_mean<-happiness%>%
filter(Logged.GDP.per.capita>=mean(Logged.GDP.per.capita))%>%
arrange((desc(Logged.GDP.per.capita)))
gdp_above_mean%>%
ggplot(aes(x=Logged.GDP.per.capita,y=Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "GDP above mean", x="GDP per capita")+theme_ipsum()
gdp_below_mean<-happiness%>%
filter(Logged.GDP.per.capita<=mean(Logged.GDP.per.capita))
gdp_below_mean%>%
ggplot(aes(Logged.GDP.per.capita,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "GDP below mean", x="GDP per capita")+theme_ipsum()
gdp_above_mean_top10<-happiness%>%
filter(Logged.GDP.per.capita>=mean(Logged.GDP.per.capita))%>%
arrange(desc(Logged.GDP.per.capita))%>%
filter(Logged.GDP.per.capita>=10.8)
gdp_above_mean_top10%>%
ggplot(aes(Logged.GDP.per.capita,Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Top 10 GDP per capita", x="GDP per capita")+theme_ipsum()
gdp_below_mean_top10<-happiness%>%
filter(Logged.GDP.per.capita<=mean(Logged.GDP.per.capita))%>%
arrange(Logged.GDP.per.capita)%>%
filter(Logged.GDP.per.capita<=7.3)
gdp_below_mean_top10%>%
ggplot(aes(Logged.GDP.per.capita,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Bottom 10 GDP per capita scores", x="GDP per capita")+theme_ipsum()
library(car)
library(olsrr)
#Check for multicollinearity
vif_quant<-car::vif(lm(data=happiness, Ladder.score~Logged.GDP.per.capita+Social.support+Healthy.life.expectancy+Freedom.to.make.life.choices+Generosity))
library(MASS)
full.model<-lm(data=happiness, Ladder.score~Logged.GDP.per.capita+Social.support+Healthy.life.expectancy+Freedom.to.make.life.choices+Generosity+Perceptions.of.corruption)
step.model<-stepAIC(full.model, direction = "both", trace=FALSE)
quadratic<-stepAIC(lm(data=happiness,Ladder.score~poly(Logged.GDP.per.capita, degree = 2, raw=TRUE)+poly(Social.support, degree = 2, raw=TRUE)+poly(Healthy.life.expectancy, degree = 2, raw=TRUE)+poly(Freedom.to.make.life.choices, degree = 2, raw=TRUE)+poly(Generosity, degree = 2, raw=TRUE)+poly(Perceptions.of.corruption, degree = 2, raw=TRUE)))
polynomial<-stepAIC(lm(data=happiness,Ladder.score~poly(Logged.GDP.per.capita, degree = 3, raw=TRUE)+poly(Social.support, degree = 3, raw=TRUE)+poly(Healthy.life.expectancy, degree = 3, raw=TRUE)+poly(Freedom.to.make.life.choices, degree = 3, raw=TRUE)+poly(Generosity, degree = 3, raw=TRUE)+poly(Perceptions.of.corruption, degree = 3, raw=TRUE)))
anova(step.model,quadratic, polynomial)
plot(step.model)
plot(polynomial)
plot(quadratic)
model1<- lm(data=happiness,Ladder.score ~ Logged.GDP.per.capita + Social.support + Healthy.life.expectancy +
Freedom.to.make.life.choices + Perceptions.of.corruption)
summary(model1)
model2<-lm(data=happiness,Ladder.score ~ poly(Logged.GDP.per.capita, degree = 2, raw = TRUE) +
poly(Social.support, degree = 2, raw = TRUE) + poly(Healthy.life.expectancy,
degree = 2, raw = TRUE) + poly(Freedom.to.make.life.choices,
degree = 2, raw = TRUE) + poly(Generosity, degree = 2, raw = TRUE))
summary(model2)
model3<-lm(data=happiness,Ladder.score ~ poly(Logged.GDP.per.capita, degree = 3, raw = TRUE) +
poly(Social.support, degree = 3, raw = TRUE) + poly(Healthy.life.expectancy,
degree = 3, raw = TRUE) + poly(Freedom.to.make.life.choices,
degree = 3, raw = TRUE))
summary(model3)
GDP<-happiness%>%
select(Logged.GDP.per.capita,Ladder.score)
GDP<-happiness%>%
select(Logged.GDP.per.capita,Ladder.score)
GDP<-happiness%>%
select(Logged.GDP.per.capita, Ladder.score)
GDP<-happiness%>%
select(Logged.GDP.per.capita,Ladder.score)
GDP<-happiness%>%
summarise(happiness)
GDP<-happiness%>%
group_by(Ladder.score)
GDP<-happiness%>%
select(Ladder.score)
library(dplyr)
GDP<-happiness%>%
select(Ladder.score)
GDP<- subset(happiness[c("Logged.GDP.per.capita","country")])
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
install.packages("rworldmap")
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
mapDevice('x11')
spdf <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(spdf, nameColumnToPlot="GDP per capita", catMethod="fixedWidth")
mapCountryData(spdf, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
spdf <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(spdf, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
install.packages("rworldmap")
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
mapDevice('x11')
map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
mapCountryData(map, nameColumnToPlot="Ladder.score", catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
mapDevice('x11')
map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
mapCountryData(map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
life<-subset(happiness[c("Healthy.life.expectancy","Country.name")])
social<-subset(happiness[c("Social.support","Country.name")])
mapDevice('x11')
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(GDP_map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
life_map<-joinCountryData2Map(life, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(life_map, nameColumnToPlot="Healthy.life.expectancy", catMethod="fixedWidth")
social_map<-joinCountryData2Map(social, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(social_map, nameColumnToPlot="Social.support", catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
life<-subset(happiness[c("Healthy.life.expectancy","Country.name")])
social<-subset(happiness[c("Social.support","Country.name")])
mapDevice('x11')
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(GDP_map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
life_map<-joinCountryData2Map(life, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(life_map, nameColumnToPlot="Healthy.life.expectancy", catMethod="fixedWidth")
social_map<-joinCountryData2Map(social, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(social_map, nameColumnToPlot="Social.support", catMethod="fixedWidth")
View(quadratic)
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
life<-subset(happiness[c("Healthy.life.expectancy","Country.name")])
social<-subset(happiness[c("Social.support","Country.name")])
mapDevice('x11')
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(GDP_map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
social_map<-joinCountryData2Map(social, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(GDP_map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
mapCountryData(GDP_map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
life_map<-joinCountryData2Map(life, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(life_map, nameColumnToPlot="Healthy.life.expectancy", catMethod="fixedWidth")
social_map<-joinCountryData2Map(social, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(social_map, nameColumnToPlot="Social.support", catMethod="fixedWidth")
mapCountryData(social_map, nameColumnToPlot="Social.support", catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
life<-subset(happiness[c("Healthy.life.expectancy","Country.name")])
social<-subset(happiness[c("Social.support","Country.name")])
mapDevice('x11')
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(GDP_map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
life_map<-joinCountryData2Map(life, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(life_map, nameColumnToPlot="Healthy.life.expectancy", catMethod="fixedWidth")
social_map<-joinCountryData2Map(social, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(social_map, nameColumnToPlot="Social.support", catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
mapDevice('x11')
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
mapDevice('x11')
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
mapDevice('x11')
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
GDP<- subset(happiness[c("Logged.GDP.per.capita","Country.name")])
class(GDP)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
life<-subset(happiness[c("Healthy.life.expectancy","Country.name")])
social<-subset(happiness[c("Social.support","Country.name")])
mapDevice('x11')
GDP_map <- joinCountryData2Map(GDP, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(GDP_map, nameColumnToPlot="Logged.GDP.per.capita", catMethod="fixedWidth")
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
life_map<-joinCountryData2Map(life, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(life_map, nameColumnToPlot="Healthy.life.expectancy", catMethod="fixedWidth")
social_map<-joinCountryData2Map(social, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(social_map, nameColumnToPlot="Social.support", catMethod="fixedWidth")
library(rworldmap)
happiness$Country.name
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = c("red","white","blue"))
install.packages("viridis")
library(viridis)
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", scale_fill_viridis())
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "heat")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "viridis")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "terrain")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "rainbow")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "negpos9 ")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "black2White ")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo ")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "white2Black")
library(rworldmap)
happiness$Country.name
library(viridis)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
library(rworldmap)
happiness$Country.name
library(viridis)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
library(rworldmap)
happiness$Country.name
library(viridis)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
library(rworldmap)
happiness$Country.name
library(viridis)
happiness_sub<- subset(happiness[c("Ladder.score","Country.name")])
happiness_map<-joinCountryData2Map(happiness_sub, joinCode="NAME", nameJoinColumn="Country.name")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "rainbow")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "heat")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "topo")
mapCountryData(happiness_map, nameColumnToPlot="Ladder.score",catMethod="fixedWidth", colourPalette = "rainbow")
happiness_above_mean<-happiness%>%
filter(Ladder.score>=mean(Ladder.score))%>%
arrange((desc(Ladder.score)))
happiness_above_mean%>%
ggplot(aes(x=Ladder.score,y=Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Happiness scores above the mean", x="Happiness Score")
happiness_below_mean<-happiness%>%
filter(Ladder.score<=mean(Ladder.score))
happiness_below_mean%>%
ggplot(aes(Ladder.score,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Happiness scores below the mean", x="Happiness Score")
happiness_above_mean_top10<-happiness%>%
filter(Ladder.score>=mean(Ladder.score))%>%
filter(Ladder.score>=7.2375)
happiness_above_mean_top10%>%
ggplot(aes(Ladder.score,Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Top 10 Happiness scores ", x="Happiness Score")
happiness_below_mean_top10<-happiness%>%
filter(Ladder.score<=mean(Ladder.score))%>%
filter(Ladder.score<=3.5733)
happiness_below_mean_top10%>%
ggplot(aes(Ladder.score,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Bottom 10 Happiness scores", x="Happiness Score")
warnings()
warnings()
warnings()
gdp_above_mean<-happiness%>%
filter(Logged.GDP.per.capita>=mean(Logged.GDP.per.capita))%>%
arrange((desc(Logged.GDP.per.capita)))
gdp_above_mean%>%
ggplot(aes(x=Logged.GDP.per.capita,y=Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "GDP above mean", x="GDP per capita")+theme_ipsum()
gdp_below_mean<-happiness%>%
filter(Logged.GDP.per.capita<=mean(Logged.GDP.per.capita))
gdp_below_mean%>%
ggplot(aes(Logged.GDP.per.capita,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "GDP below mean", x="GDP per capita")+theme_ipsum()
gdp_above_mean_top10<-happiness%>%
filter(Logged.GDP.per.capita>=mean(Logged.GDP.per.capita))%>%
arrange(desc(Logged.GDP.per.capita))%>%
filter(Logged.GDP.per.capita>=10.8)
gdp_above_mean_top10%>%
ggplot(aes(Logged.GDP.per.capita,Regional.indicator))+ geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Top 10 GDP per capita", x="GDP per capita")+theme_ipsum()
gdp_below_mean_top10<-happiness%>%
filter(Logged.GDP.per.capita<=mean(Logged.GDP.per.capita))%>%
arrange(Logged.GDP.per.capita)%>%
filter(Logged.GDP.per.capita<=7.3)
gdp_below_mean_top10%>%
ggplot(aes(Logged.GDP.per.capita,Regional.indicator))+  geom_col(width = 0.3, color="skyblue", fill=rgb(0.1,0.4,0.5,0.7 ))+labs(title = "Bottom 10 GDP per capita scores", x="GDP per capita")+theme_ipsum()
warnings()
install("extrafont")
install.packages("extrafont")
library(extrafont)
library(reshape2)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(hrbrthemes)
library(extrafont)
font_import()
